script.

  // wrap twitter bs events to prevent race conditions
  $('.btn').on({
    change : function(e) {
      setTimeout(function() {
        $(e.currentTarget).trigger('lateChange');
      }, 20);
    }
  });

  $(document).on('click', '.datagrid .delete', function() {

    var id = $(this).attr('data-id');
    app.dialog(
      'Do you really want to delete this user?',
      {
        ok: function(callback) {

          $.ajax({
              type: "DELETE",
              url: "/users/" + id
          }).done(function(data) {
              window.location.reload();
          });

          callback && callback();
        }
      }
    );
  });

  $(document).on('click', '.datagrid .restore', function() {

    var id = $(this).attr('data-id');
    app.dialog(
      'Do you really want to restore this user?',
      {
        ok: function(callback) {

          $.ajax({
              type: "POST",
              url: "/users/" + id + '/restore'
          }).done(function(data) {
              window.location.reload();
          });

          callback && callback();
        }
      }
    );
  });


  /**
   * DataGrid Implementation
   */

  /**
   * DataGrid Class
   */
  var DataGrid = function(table, options)
  {
    this.table   = table;
    this.search  = new Search(this, table);
    this.sort    = new Sort(this, table);
    this.options = options;

    this.options.softDeletion = ('undefined' !== typeof options.softDeletion) ?
      options.softDeletion : true;
  }

  /**
   * Perform a AJAX request with given params.
   * And fill the table with the results.
   */
  DataGrid.prototype.loadAndRebuild = function(params)
  {
    var self = this;
    var url  = document.URL;
    var sep  = '&';
    params = params || [];

    params.unshift({name: 'render', value: 'rows'});

    if (-1 === document.URL.indexOf('?')) {
      sep = '?';
    }

    if (null !== document.URL.match(/\?$/gi)) {
      sep = '';
    }

    params.forEach(function(param) {
      url += (sep + param.name + '=' + encodeURIComponent(param.value));
    });

    $.ajax({
        type : "GET",
        url  : url,
    }).done(function(data) {
      self.table.find('tr').not(':first').remove();
      self.table.find('tbody').append(data);
    });
  }

  /**
   * Reset all filters.
   */
  DataGrid.prototype.reset = function()
  {
    this.loadAndRebuild([]);
  }

  /**
   * Load by all settings.
   */
  DataGrid.prototype.load = function()
  {
    var params = [];

    params = params.concat(this.search.getParameters());
    params = params.concat(this.sort.getParameters());

    this.loadAndRebuild(params);
  }

  /**
   * Search helper class
   */
  var Search = function(datagrid, datagridElement)
  {
    var self             = this;
    this.datagrid        = datagrid;
    this.datagridElement = datagridElement;
    this.input           = $('#search-input');
    this.trash           = $('#search-trash');

    // Setup datagrid table headers
    this.datagridElement.find($('th[data-property]')).each(function (idx, itm) {

      var th = $(itm);
      th.html($('<span>&nbsp;' + th.text() + '&nbsp;</span>'))
      th.prepend($('<i class="search-trigger icon-search text-muted"></i>'));
    });

    // Bind events

    // Search or trash button clicked
    $('#search-btn, #search-trash').on('lateChange', function() {
        self.datagrid.load();
    });

    // Search selector clicked
    $('.search-trigger').on('click', function() {
      var cur = $(this).parent();
      self.setting(cur.attr('data-property'), cur.text());
      $('#search-input').focus();
    });

    // Clear search button clicked
    $('#search-clear').on('click', function() {
      self.clear();
      self.setting('fuzzy');
      self.datagrid.reset();
    });

    // Pressed enter on search box
    $('#search-input').keypress(function(event){
      if (event.keyCode == 13) {
        $('#search-btn').trigger('click');
      }
    });
  }

  /**
   * Set the search box settings.
   */
  Search.prototype.setting = function(property, placeholder)
  {
    if ('fuzzy' == property) {
      placeholder = 'Fuzzy search';
    } else {
      placeholder = 'Search for' + placeholder.toLowerCase();
    }

    this.input.attr('placeholder', placeholder + '..')
              .attr('data-property', property);
  }

  /**
   * Clear the search box.
   */
  Search.prototype.clear = function()
  {
    this.input.val('');
  }

  /**
   * Get all relevant search parameters.
   */
  Search.prototype.getParameters = function()
  {
    var params = [];

    if (this.datagrid.options.softDeletion) {

      if (false == this.trash.find('label').hasClass('active')) {

        params.push({
          name: 'filter',
          value: 'trash'
        });
      }
    }

    if ('' == this.input.val()) {
      return params;
    }

    var params = params.concat([
      {name: 'search', value: this.input.val()},
      {name: 'sprop', value: this.input.attr('data-property')}
    ]);

    return params;
  }

  /**
   * Sort helper class
   */
  var Sort = function(datagrid, datagridElement)
  {
    var self             = this;
    this.datagrid        = datagrid;
    this.datagridElement = datagridElement;

    // Bind events

    // Table header clicked
    this.datagridElement.find($('th[data-property] span')).on('click', function() {
      self.toggle($(this).parent());
    });
  }

  /**
   * Toggle a sort for a column.
   */
  Sort.prototype.toggle = function(th)
  {
    this.datagridElement.find($('th[data-property]')).not(th).each(function(idx, item) {
      item = $(item);
      item.find('.direction').remove();
      item.attr('data-sort', '');
    });

    var dir = th.attr('data-sort');

    if (!dir) {
      th.append($('<i class="direction text-muted icon-arrow-down"></i>'));
      th.attr('data-sort', 'asc');
    }

    if ('asc' === dir) {
      th.find('.direction').removeClass('icon-arrow-down').addClass('icon-arrow-up');
      th.attr('data-sort', 'desc');
    }

    if ('desc' === dir) {
      th.find('.direction').remove();
      th.attr('data-sort', '');
    }

    if (!th.attr('data-sort')) {
      return this.datagrid.reset();
    }

    this.datagrid.load();
  }

  /**
   * Get all relevant order parameters.
   */
  Sort.prototype.getParameters = function()
  {
    var th = this.datagridElement.find($('th[data-property]')).not($('[data-sort=""]'));

    if (0 === th.length || !th.attr('data-sort') || '' == th.attr('data-sort')) {
      return [];
    }

    return [
      {name: 'order', value: th.attr('data-sort')},
      {name: 'oprop', value: th.attr('data-property')}
    ]
  }

  /**
   * Build instances for the whole index page.
   */
  var datagrid = new DataGrid($('table.datagrid'), {
    softDeletion: true
  });

